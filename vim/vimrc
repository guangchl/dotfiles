""" Turn on syntax highlighting
syntax on


""" Line number (hybrid mode from Vim version 7.4)
set relativenumber
set number


""" Insert mode
" highlight the cursor line, default is underline
:autocmd InsertEnter,InsertLeave * set cul!  " oneliner as the 2 line below
":autocmd InsertEnter * set cul
":autocmd InsertLeave * set nocul
" change the default highlight from underline to background color
hi CursorLine cterm=NONE ctermbg=black
" change the cursor shape in insert mode (for gnome-terminal version >= 3.16)
if has("autocmd")
  au VimEnter,InsertLeave * silent execute '!echo -ne "\e[1 q"' | redraw!
  au InsertEnter,InsertChange *
    \ if v:insertmode == 'i' | 
    \   silent execute '!echo -ne "\e[5 q"' | redraw! |
    \ elseif v:insertmode == 'r' |
    \   silent execute '!echo -ne "\e[3 q"' | redraw! |
    \ endif
  au VimLeave * silent execute '!echo -ne "\e[ q"' | redraw!
endif


""" Fix Unix-based system backspace problem
set backspace=2 " make backspace work like most other apps, alternative to the line below
"set backspace=indent,eol,start


""" Define some nice abbreviations:
ab #d #define
ab #i #include


""" Converting tabs to spaces
set tabstop=4 shiftwidth=4 expandtab  " oneliner as the 3 lines below
"set expandtab     " insert space characters whenever the tab key is pressed
"set tabstop=4     " set number of space when typing tab
"set shiftwidth=4  " change the number of space characters inserted for indentation
"retab             " change all the existing tab characters to match the current tab settings


""" Start vim in utf-8 encoding mode
set encoding=utf-8  " The encoding displayed.
set fileencoding=utf-8  " The encoding written to file.


""" folding settings
set foldmethod=indent   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=1         "this is just what i use


""" Searching
set hlsearch " highlight all search matches
" press return to temporarily get out of the highlighted search
nnoremap <CR> :nohlsearch<CR>


""" Setting statusline
" colors
hi User0 ctermfg=Black      ctermbg=Green
hi User1 ctermfg=LightGray  ctermbg=Black
hi User2 ctermfg=LightGray  ctermbg=Brown
hi User3 ctermfg=LightGray  ctermbg=DarkRed
hi User4 ctermfg=LightGray  ctermbg=DarkGreen
hi User5 ctermfg=LightGray  ctermbg=Blue
hi User6 ctermfg=LightGray  ctermbg=DarkCyan
hi User7 ctermfg=LightGray  ctermbg=DarkBlue
hi User8 ctermfg=LightGray  ctermbg=DarkGrey
" statusline
set laststatus=2
set statusline=
set statusline+=%0*\[%n]                                   "buffernr
set statusline+=%1*\ %<%F\ %m\                             "File+path + modified flag
set statusline+=%2*\ %y\                                   "FileType
set statusline+=%3*\ %{''.(&fenc!=''?&fenc:&enc).''}       "Encoding
set statusline+=%3*\ %{(&bomb?\",BOM\":\"\")}\             "Encoding2
set statusline+=%4*\ %{&ff}\                               "FileFormat (dos/unix..) 
set statusline+=%5*\ %{&spelllang}\ %{HighlightSearch()}\  "Spellanguage & Highlight on?
set statusline+=%6*\ %=\ row:%l/%L\ (%p%%)\                "Rownumber/total (%)
set statusline+=%7*\ col:%c\                               "Colnr
set statusline+=%8*\ \ %r%w\ %P\                           "Readonly? Top/bot.
" functions
function! HighlightSearch()
  if &hls
    return 'H'
  else
    return ''
  endif
endfunction


""" vim-plug (from example on page https://github.com/junegunn/vim-plug) 
call plug#begin('~/.vim/plugged')

" Make sure you use single quotes
" In vim, type :help <plugin-name> to show the manual, like :help vim-go.

" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
"Plug 'junegunn/vim-easy-align'

" Any valid git URL is allowed
"Plug 'https://github.com/junegunn/vim-github-dashboard.git'

" Group dependencies, vim-snippets depends on ultisnips
"Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

" On-demand loading
" NERDTree
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
"Plug 'tpope/vim-fireplace', { 'for': 'clojure' }

" Using a non-master branch
"Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }

" EasyMotion
Plug 'easymotion/vim-easymotion'

" surround.vim (:help surround) & repeat.vim
Plug 'tpope/vim-surround'   " e.g. ysiw( wrap word with (), yss( wrap line with ()
Plug 'tpope/vim-repeat'     " . command will work with ds, cs, and ys with repeat.vim

" tcomment
Plug 'tomtom/tcomment_vim'

" matchit
Plug 'matchit.zip'

" MRU (:MRU)
Plug 'yegappan/mru'

" FuzzyFinder (:help FuzzyFinder, :FufFile)
Plug 'L9'           " Vim-script library, required for FuzzyFinder
Plug 'FuzzyFinder'  " mirror at https://github.com/vim-scripts/FuzzyFinder

" Using a tagged release; wildcard allowed (requires git 1.9.2 or above)
Plug 'fatih/vim-go' ", { 'tag': '*' }
" Plugin options
Plug 'nsf/gocode' ", { 'tag': 'v.20150303', 'rtp': 'vim' }
" vim-scala (:help scala)
Plug 'derekwyatt/vim-scala'

" auto complete
Plug 'Shougo/neocomplete.vim'
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'   


" Plugin outside ~/.vim/plugged with post-update hook
"Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

" Unmanaged plugin (manually installed and updated)
"Plug '~/my-prototype-plugin'

" Add plugins to &runtimepath
call plug#end()
